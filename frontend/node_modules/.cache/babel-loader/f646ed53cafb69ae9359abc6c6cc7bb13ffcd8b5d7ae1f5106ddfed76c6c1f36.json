{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kiran_Projects\\\\Optimized_Data_Sharding\\\\frontend\\\\src\\\\endpoints\\\\MonitorView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getShardingStatus, getResults, resetSharding } from '../services/api';\nimport ResultView from './ResultView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonitorView() {\n  _s();\n  const [status, setStatus] = useState('Idle');\n  const [message, setMessage] = useState('');\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [results, setResults] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await getShardingStatus();\n        setStatus(response.data.status);\n        setMessage(response.data.message);\n        if (response.data.status === 'In Progress') {\n          setElapsedTime(response.data.elapsed_time);\n        } else if (response.data.status === 'Completed') {\n          const resultResponse = await getResults();\n          setResults(resultResponse.data);\n        }\n      } catch (error) {\n        console.error('Error fetching sharding status:', error);\n      }\n    };\n    const interval = setInterval(fetchData, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  handleClear = () => {\n    // Reset the frontend state to its initial values\n    setStatus('Idle');\n    setMessage('');\n    setElapsedTime(0);\n    setResults(null);\n    setShardingStatusFetched(false); // Reset the flag to allow fetching sharding status again\n\n    // Clear sessionStorage to reset data\n    sessionStorage.clear();\n\n    // Optionally call the backend to reset any server-side state\n    resetSharding().then(() => {\n      console.log('Sharding reset successfully');\n    }).catch(error => {\n      console.error('Failed to reset sharding:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 10\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }, this), \" \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), status === 'In Progress' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Elapsed Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }, this), \" \", elapsedTime, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), results ? /*#__PURE__*/_jsxDEV(ResultView, {\n      metadata: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) // Pass results as props to ResultView\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for sharding to complete...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(MonitorView, \"7eGUUNBMv1EKBsXonqCvnCuqq+k=\");\n_c = MonitorView;\nexport default MonitorView;\nvar _c;\n$RefreshReg$(_c, \"MonitorView\");","map":{"version":3,"names":["React","useEffect","useState","getShardingStatus","getResults","resetSharding","ResultView","jsxDEV","_jsxDEV","MonitorView","_s","status","setStatus","message","setMessage","elapsedTime","setElapsedTime","results","setResults","fetchData","response","data","elapsed_time","resultResponse","error","console","interval","setInterval","clearInterval","handleClear","setShardingStatusFetched","sessionStorage","clear","then","log","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","metadata","onClick","_c","$RefreshReg$"],"sources":["F:/Kiran_Projects/Optimized_Data_Sharding/frontend/src/endpoints/MonitorView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getShardingStatus, getResults, resetSharding } from '../services/api';\r\nimport ResultView from './ResultView';\r\n\r\nfunction MonitorView() {\r\nconst [status, setStatus] = useState('Idle');\r\n  const [message, setMessage] = useState('');\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [results, setResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await getShardingStatus();\r\n        setStatus(response.data.status);\r\n        setMessage(response.data.message);\r\n\r\n        if (response.data.status === 'In Progress') {\r\n          setElapsedTime(response.data.elapsed_time);\r\n        } else if (response.data.status === 'Completed') {\r\n          const resultResponse = await getResults();\r\n          setResults(resultResponse.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sharding status:', error);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(fetchData, 2000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  handleClear = () => {\r\n    // Reset the frontend state to its initial values\r\n    setStatus('Idle');\r\n    setMessage('');\r\n    setElapsedTime(0);\r\n    setResults(null);\r\n    setShardingStatusFetched(false); // Reset the flag to allow fetching sharding status again\r\n\r\n    // Clear sessionStorage to reset data\r\n    sessionStorage.clear();\r\n\r\n    // Optionally call the backend to reset any server-side state\r\n    resetSharding()\r\n      .then(() => {\r\n        console.log('Sharding reset successfully');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to reset sharding:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Sharding Status</h2>\r\n      <p><strong>Status:</strong> {status}</p>\r\n      <p><strong>Message:</strong> {message}</p>\r\n      {/* If sharding is in progress, show elapsed time */}\r\n      {status === 'In Progress' && (\r\n        <p><strong>Elapsed Time:</strong> {elapsedTime} seconds</p>\r\n      )}\r\n\r\n      <h2>Sharding Results</h2>\r\n      {/* If results are available, show them */}\r\n      {results ? (\r\n        <ResultView metadata={results} /> // Pass results as props to ResultView\r\n      ) : (\r\n        <p>Waiting for sharding to complete...</p>\r\n      )}\r\n\r\n      {/* Clear button to reset the process */}\r\n      <button onClick={handleClear}>Clear</button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MonitorView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}