{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kiran_Projects\\\\Optimized_Data_Sharding\\\\frontend\\\\src\\\\endpoints\\\\MonitorView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getShardingStatus, getResults, resetSharding } from '../services/api';\nimport ResultView from './ResultView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonitorView() {\n  _s();\n  const [status, setStatus] = useState('Idle');\n  const [message, setMessage] = useState('');\n  const [elapsedTime, setElapsedTime] = useState(0);\n  const [results, setResults] = useState(null);\n  useEffect(() => {\n    let interval = null;\n    const fetchData = async () => {\n      try {\n        const response = await getShardingStatus();\n        setStatus(response.data.status);\n        setMessage(response.data.message);\n        if (response.data.status === 'In Progress') {\n          setElapsedTime(response.data.elapsed_time);\n        } else if (response.data.status === 'Completed') {\n          clearInterval(interval); // Stop polling when sharding is completed\n          try {\n            const resultResponse = await getResults();\n            setResults(resultResponse.data);\n          } catch (error) {\n            console.error('Failed to fetch results:', error);\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching sharding status:', error);\n      }\n    };\n\n    // Start polling only when the status is not Completed\n    if (status !== 'Completed') {\n      interval = setInterval(fetchData, 2000);\n    }\n    return () => clearInterval(interval); // Cleanup on unmount\n  }, [status]); // Depend on `status` to re-evaluate polling\n\n  const handleClear = () => {\n    setStatus('Idle');\n    setMessage('');\n    setElapsedTime(0);\n    setResults(null);\n    sessionStorage.clear();\n    resetSharding().then(() => {\n      console.log('Sharding reset successfully');\n    }).catch(error => {\n      console.error('Failed to reset sharding:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 10\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 10\n      }, this), \" \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), status === 'In Progress' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Elapsed Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }, this), \" \", elapsedTime, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), results ? /*#__PURE__*/_jsxDEV(ResultView, {\n      metadata: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for sharding to complete...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(MonitorView, \"7eGUUNBMv1EKBsXonqCvnCuqq+k=\");\n_c = MonitorView;\nexport default MonitorView;\nvar _c;\n$RefreshReg$(_c, \"MonitorView\");","map":{"version":3,"names":["React","useEffect","useState","getShardingStatus","getResults","resetSharding","ResultView","jsxDEV","_jsxDEV","MonitorView","_s","status","setStatus","message","setMessage","elapsedTime","setElapsedTime","results","setResults","interval","fetchData","response","data","elapsed_time","clearInterval","resultResponse","error","console","setInterval","handleClear","sessionStorage","clear","then","log","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","metadata","onClick","_c","$RefreshReg$"],"sources":["F:/Kiran_Projects/Optimized_Data_Sharding/frontend/src/endpoints/MonitorView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getShardingStatus, getResults, resetSharding } from '../services/api';\r\nimport ResultView from './ResultView';\r\n\r\nfunction MonitorView() {\r\n  const [status, setStatus] = useState('Idle');\r\n  const [message, setMessage] = useState('');\r\n  const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [results, setResults] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await getShardingStatus();\r\n        setStatus(response.data.status);\r\n        setMessage(response.data.message);\r\n\r\n        if (response.data.status === 'In Progress') {\r\n          setElapsedTime(response.data.elapsed_time);\r\n        } else if (response.data.status === 'Completed') {\r\n          clearInterval(interval); // Stop polling when sharding is completed\r\n          try {\r\n            const resultResponse = await getResults();\r\n            setResults(resultResponse.data);\r\n          } catch (error) {\r\n            console.error('Failed to fetch results:', error);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching sharding status:', error);\r\n      }\r\n    };\r\n\r\n    // Start polling only when the status is not Completed\r\n    if (status !== 'Completed') {\r\n      interval = setInterval(fetchData, 2000);\r\n    }\r\n\r\n    return () => clearInterval(interval); // Cleanup on unmount\r\n  }, [status]); // Depend on `status` to re-evaluate polling\r\n\r\n  const handleClear = () => {\r\n    setStatus('Idle');\r\n    setMessage('');\r\n    setElapsedTime(0);\r\n    setResults(null);\r\n\r\n    sessionStorage.clear();\r\n\r\n    resetSharding()\r\n      .then(() => {\r\n        console.log('Sharding reset successfully');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to reset sharding:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Sharding Status</h2>\r\n      <p><strong>Status:</strong> {status}</p>\r\n      <p><strong>Message:</strong> {message}</p>\r\n      {status === 'In Progress' && (\r\n        <p><strong>Elapsed Time:</strong> {elapsedTime} seconds</p>\r\n      )}\r\n\r\n      <h2>Sharding Results</h2>\r\n      {results ? (\r\n        <ResultView metadata={results} />\r\n      ) : (\r\n        <p>Waiting for sharding to complete...</p>\r\n      )}\r\n\r\n      <button onClick={handleClear}>Clear</button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MonitorView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}