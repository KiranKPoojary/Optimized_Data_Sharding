{"ast":null,"code":"import axios from 'axios';\n\n// Set default base URL\naxios.defaults.baseURL = 'http://127.0.0.1:5000'; // Backend URL\n\n// Global timeout for all requests (optional)\naxios.defaults.timeout = 10000; // Set timeout to 10 seconds (adjustable)\n\naxios.interceptors.response.use(response => response, error => {\n  // Handle global errors\n  if (error.response) {\n    // Server responded with a status other than 2xx\n    console.error(`Error: ${error.response.status}, ${error.response.data}`);\n  } else if (error.request) {\n    // No response received from the server\n    console.error(\"No response from server\");\n  } else {\n    // Other errors\n    console.error(\"Error\", error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Upload File\nexport const uploadFile = formData => axios.post('/upload', formData, {\n  headers: {\n    'Content-Type': 'multipart/form-data'\n  }\n});\n\n// Start Sharding\nexport const startSharding = (filename, algorithm) => axios.post('/start_sharding', {\n  filename,\n  algorithm\n});\n\n// Get Sharding Status\nexport const getShardingStatus = () => axios.get('/sharding_status');\n\n// Fetch Results (Metadata)\nexport const getResults = () => axios.get('/results');","map":{"version":3,"names":["axios","defaults","baseURL","timeout","interceptors","response","use","error","console","status","data","request","message","Promise","reject","uploadFile","formData","post","headers","startSharding","filename","algorithm","getShardingStatus","get","getResults"],"sources":["F:/Kiran_Projects/Optimized_Data_Sharding/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set default base URL\r\naxios.defaults.baseURL = 'http://127.0.0.1:5000'; // Backend URL\r\n\r\n// Global timeout for all requests (optional)\r\naxios.defaults.timeout = 10000; // Set timeout to 10 seconds (adjustable)\r\n\r\naxios.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle global errors\r\n    if (error.response) {\r\n      // Server responded with a status other than 2xx\r\n      console.error(`Error: ${error.response.status}, ${error.response.data}`);\r\n    } else if (error.request) {\r\n      // No response received from the server\r\n      console.error(\"No response from server\");\r\n    } else {\r\n      // Other errors\r\n      console.error(\"Error\", error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Upload File\r\nexport const uploadFile = (formData) =>\r\n  axios.post('/upload', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data',\r\n    },\r\n  });\r\n\r\n// Start Sharding\r\nexport const startSharding = (filename, algorithm) =>\r\n  axios.post('/start_sharding', { filename, algorithm });\r\n\r\n// Get Sharding Status\r\nexport const getShardingStatus = () => axios.get('/sharding_status');\r\n\r\n// Fetch Results (Metadata)\r\nexport const getResults = () => axios.get('/results');\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAElD;AACAF,KAAK,CAACC,QAAQ,CAACE,OAAO,GAAG,KAAK,CAAC,CAAC;;AAEhCH,KAAK,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC5BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACF,QAAQ,EAAE;IAClB;IACAG,OAAO,CAACD,KAAK,CAAC,UAAUA,KAAK,CAACF,QAAQ,CAACI,MAAM,KAAKF,KAAK,CAACF,QAAQ,CAACK,IAAI,EAAE,CAAC;EAC1E,CAAC,MAAM,IAAIH,KAAK,CAACI,OAAO,EAAE;IACxB;IACAH,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAC;EAC1C,CAAC,MAAM;IACL;IACAC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACK,OAAO,CAAC;EACvC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMQ,UAAU,GAAIC,QAAQ,IACjChB,KAAK,CAACiB,IAAI,CAAC,SAAS,EAAED,QAAQ,EAAE;EAC9BE,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEJ;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,SAAS,KAC/CrB,KAAK,CAACiB,IAAI,CAAC,iBAAiB,EAAE;EAAEG,QAAQ;EAAEC;AAAU,CAAC,CAAC;;AAExD;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAMtB,KAAK,CAACuB,GAAG,CAAC,kBAAkB,CAAC;;AAEpE;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAMxB,KAAK,CAACuB,GAAG,CAAC,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}