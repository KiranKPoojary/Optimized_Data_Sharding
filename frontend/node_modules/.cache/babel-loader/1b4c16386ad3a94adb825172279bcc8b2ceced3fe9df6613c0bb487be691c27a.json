{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kiran_Projects\\\\Optimized_Data_Sharding\\\\frontend\\\\src\\\\endpoints\\\\MonitorView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getShardingStatus, getResults } from '../services/api';\nimport ResultView from './ResultView'; // Import the ResultView component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonitorView() {\n  _s();\n  const [status, setStatus] = useState('Idle');\n  const [message, setMessage] = useState('');\n  const [results, setResults] = useState(null); // Store the results after sharding is complete\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getShardingStatus().then(response => {\n        setStatus(response.data.status);\n        setMessage(response.data.message);\n\n        // If sharding is complete, stop the polling and fetch the results\n        if (response.data.status === 'Complete') {\n          clearInterval(interval);\n          // Fetch the results once sharding is complete\n          getResults().then(resultResponse => {\n            setResults(resultResponse.data); // Update the results\n          }).catch(error => {\n            console.error('Failed to fetch results:', error);\n          });\n        }\n      }).catch(error => {\n        console.error('Failed to fetch sharding status:', error);\n      });\n    }, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(interval); // Cleanup on component unmount\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 10\n      }, this), \" \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), results ? /*#__PURE__*/_jsxDEV(ResultView, {\n      metadata: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) // Pass results as props to ResultView\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for sharding to complete...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(MonitorView, \"XxGjrwW3oBiQqpu5Bxl4r1YC/0w=\");\n_c = MonitorView;\nexport default MonitorView;\nvar _c;\n$RefreshReg$(_c, \"MonitorView\");","map":{"version":3,"names":["React","useEffect","useState","getShardingStatus","getResults","ResultView","jsxDEV","_jsxDEV","MonitorView","_s","status","setStatus","message","setMessage","results","setResults","interval","setInterval","then","response","data","clearInterval","resultResponse","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","metadata","_c","$RefreshReg$"],"sources":["F:/Kiran_Projects/Optimized_Data_Sharding/frontend/src/endpoints/MonitorView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getShardingStatus, getResults } from '../services/api';\r\nimport ResultView from './ResultView'; // Import the ResultView component\r\n\r\nfunction MonitorView() {\r\n  const [status, setStatus] = useState('Idle');\r\n  const [message, setMessage] = useState('');\r\n  const [results, setResults] = useState(null); // Store the results after sharding is complete\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      getShardingStatus()\r\n        .then((response) => {\r\n          setStatus(response.data.status);\r\n          setMessage(response.data.message);\r\n\r\n          // If sharding is complete, stop the polling and fetch the results\r\n          if (response.data.status === 'Complete') {\r\n            clearInterval(interval);\r\n            // Fetch the results once sharding is complete\r\n            getResults()\r\n              .then((resultResponse) => {\r\n                setResults(resultResponse.data); // Update the results\r\n              })\r\n              .catch((error) => {\r\n                console.error('Failed to fetch results:', error);\r\n              });\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to fetch sharding status:', error);\r\n        });\r\n    }, 2000); // Poll every 2 seconds\r\n\r\n    return () => clearInterval(interval); // Cleanup on component unmount\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  return (\r\n    <section>\r\n      <h2>Sharding Status</h2>\r\n      <p><strong>Status:</strong> {status}</p>\r\n      <p><strong>Message:</strong> {message}</p>\r\n\r\n      {/* If results are available, show them */}\r\n      {results ? (\r\n        <ResultView metadata={results} /> // Pass results as props to ResultView\r\n      ) : (\r\n        <p>Waiting for sharding to complete...</p>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MonitorView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}