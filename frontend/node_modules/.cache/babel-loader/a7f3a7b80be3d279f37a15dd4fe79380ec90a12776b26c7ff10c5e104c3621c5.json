{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kiran_Projects\\\\Optimized_Data_Sharding\\\\frontend\\\\src\\\\endpoints\\\\MonitorView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getShardingStatus } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonitorView() {\n  _s();\n  const [status, setStatus] = useState('Idle');\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getShardingStatus().then(response => {\n        setStatus(response.data.status);\n        setMessage(response.data.message);\n      }).catch(error => {\n        console.error('Failed to fetch sharding status:', error);\n      });\n    }, 2000); // Poll every 2 seconds\n\n    return () => clearInterval(interval); // Cleanup on component unmount\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 10\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 10\n      }, this), \" \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(MonitorView, \"G/hN1yJy4XQrdS4BAglcpCWBzdU=\");\n_c = MonitorView;\nexport default MonitorView;\nvar _c;\n$RefreshReg$(_c, \"MonitorView\");","map":{"version":3,"names":["React","useEffect","useState","getShardingStatus","jsxDEV","_jsxDEV","MonitorView","_s","status","setStatus","message","setMessage","interval","setInterval","then","response","data","catch","error","console","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/Kiran_Projects/Optimized_Data_Sharding/frontend/src/endpoints/MonitorView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getShardingStatus } from '../services/api';\r\n\r\nfunction MonitorView() {\r\n  const [status, setStatus] = useState('Idle');\r\n  const [message, setMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      getShardingStatus()\r\n        .then((response) => {\r\n          setStatus(response.data.status);\r\n          setMessage(response.data.message);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to fetch sharding status:', error);\r\n        });\r\n    }, 2000); // Poll every 2 seconds\r\n\r\n    return () => clearInterval(interval); // Cleanup on component unmount\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <h2>Sharding Status</h2>\r\n      <p><strong>Status:</strong> {status}</p>\r\n      <p><strong>Message:</strong> {message}</p>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MonitorView;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,iBAAiB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCV,iBAAiB,CAAC,CAAC,CAChBW,IAAI,CAAEC,QAAQ,IAAK;QAClBN,SAAS,CAACM,QAAQ,CAACC,IAAI,CAACR,MAAM,CAAC;QAC/BG,UAAU,CAACI,QAAQ,CAACC,IAAI,CAACN,OAAO,CAAC;MACnC,CAAC,CAAC,CACDO,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAME,aAAa,CAACR,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBpB,OAAA;MAAAgB,QAAA,gBAAGhB,OAAA;QAAAgB,QAAA,EAAQ;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAACjB,MAAM;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCpB,OAAA;MAAAgB,QAAA,gBAAGhB,OAAA;QAAAgB,QAAA,EAAQ;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAACf,OAAO;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEd;AAAClB,EAAA,CA1BQD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AA4BpB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}