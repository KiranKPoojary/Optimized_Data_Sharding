{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kiran_Projects\\\\Optimized_Data_Sharding\\\\frontend\\\\src\\\\endpoints\\\\MonitorView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getShardingStatus, getResults, resetSharding } from '../services/api';\nimport ResultView from './ResultView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonitorView() {\n  _s();\n  const [status, setStatus] = useState('Idle');\n  const [message, setMessage] = useState('');\n  const [elapsedTime, setElapsedTime] = useState(0); // Track elapsed time\n  const [results, setResults] = useState(null); // Store the results after sharding is complete\n  const [shardingStatusFetched, setShardingStatusFetched] = useState(false); // Track if sharding status has been fetched\n\n  useEffect(() => {\n    // Reset state to initial values when the component mounts\n    setStatus('Idle');\n    setMessage('');\n    setElapsedTime(0);\n    setResults(null);\n    setShardingStatusFetched(false); // Clear the flag to allow fetching sharding status\n\n    // Only fetch sharding status if it hasn't been fetched yet and the status is not already \"Completed\"\n    if (status !== '') {\n      const interval = setInterval(() => {\n        getShardingStatus() // Fetch the current status from the backend\n        .then(response => {\n          setStatus(response.data.status);\n          setMessage(response.data.message);\n          if (response.data.status === 'In Progress') {\n            setElapsedTime(response.data.elapsed_time);\n          }\n          if (response.data.status === 'Completed') {\n            clearInterval(interval); // Stop polling if the sharding process is complete\n            getResults() // Fetch the results of the sharding process\n            .then(resultResponse => {\n              setResults(resultResponse.data);\n            }).catch(error => {\n              console.error('Failed to fetch results:', error);\n            });\n            setShardingStatusFetched(true);\n          }\n        }).catch(error => {\n          console.error('Failed to fetch sharding status:', error);\n        });\n      }, 2000); // Polling every 2 seconds\n\n      return () => clearInterval(interval); // Cleanup interval on component unmount\n    }\n  }, [shardingStatusFetched, status]);\n  const handleClear = () => {\n    // Reset the frontend state to its initial values\n    setStatus('Idle');\n    setMessage('');\n    setElapsedTime(0);\n    setResults(null);\n    setShardingStatusFetched(false); // Reset the flag to allow fetching sharding status again\n\n    // Clear sessionStorage to reset data\n    sessionStorage.clear();\n\n    // Optionally call the backend to reset any server-side state\n    resetSharding().then(() => {\n      console.log('Sharding reset successfully');\n    }).catch(error => {\n      console.error('Failed to reset sharding:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 10\n      }, this), \" \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 10\n      }, this), \" \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), status === 'In Progress' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Elapsed Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 12\n      }, this), \" \", elapsedTime, \" seconds\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sharding Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), results ? /*#__PURE__*/_jsxDEV(ResultView, {\n      metadata: results\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) // Pass results as props to ResultView\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for sharding to complete...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClear,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(MonitorView, \"9eRGZPyIFwGZVowN8xj8KoHqDSw=\");\n_c = MonitorView;\nexport default MonitorView;\nvar _c;\n$RefreshReg$(_c, \"MonitorView\");","map":{"version":3,"names":["React","useEffect","useState","getShardingStatus","getResults","resetSharding","ResultView","jsxDEV","_jsxDEV","MonitorView","_s","status","setStatus","message","setMessage","elapsedTime","setElapsedTime","results","setResults","shardingStatusFetched","setShardingStatusFetched","interval","setInterval","then","response","data","elapsed_time","clearInterval","resultResponse","catch","error","console","handleClear","sessionStorage","clear","log","children","fileName","_jsxFileName","lineNumber","columnNumber","metadata","onClick","_c","$RefreshReg$"],"sources":["F:/Kiran_Projects/Optimized_Data_Sharding/frontend/src/endpoints/MonitorView.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { getShardingStatus, getResults, resetSharding } from '../services/api';\r\nimport ResultView from './ResultView';\r\n\r\nfunction MonitorView() {\r\n  const [status, setStatus] = useState('Idle');\r\n  const [message, setMessage] = useState('');\r\n  const [elapsedTime, setElapsedTime] = useState(0); // Track elapsed time\r\n  const [results, setResults] = useState(null); // Store the results after sharding is complete\r\n  const [shardingStatusFetched, setShardingStatusFetched] = useState(false); // Track if sharding status has been fetched\r\n\r\n  useEffect(() => {\r\n  // Reset state to initial values when the component mounts\r\n  setStatus('Idle');\r\n  setMessage('');\r\n  setElapsedTime(0);\r\n  setResults(null);\r\n  setShardingStatusFetched(false); // Clear the flag to allow fetching sharding status\r\n\r\n  // Only fetch sharding status if it hasn't been fetched yet and the status is not already \"Completed\"\r\n  if (status !== '') {\r\n    const interval = setInterval(() => {\r\n      getShardingStatus() // Fetch the current status from the backend\r\n        .then((response) => {\r\n          setStatus(response.data.status);\r\n          setMessage(response.data.message);\r\n          if (response.data.status === 'In Progress') {\r\n            setElapsedTime(response.data.elapsed_time);\r\n          }\r\n\r\n          if (response.data.status === 'Completed') {\r\n            clearInterval(interval); // Stop polling if the sharding process is complete\r\n            getResults() // Fetch the results of the sharding process\r\n              .then((resultResponse) => {\r\n                setResults(resultResponse.data);\r\n              })\r\n              .catch((error) => {\r\n                console.error('Failed to fetch results:', error);\r\n              });\r\n            setShardingStatusFetched(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error('Failed to fetch sharding status:', error);\r\n        });\r\n    }, 2000); // Polling every 2 seconds\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on component unmount\r\n  }\r\n}, [shardingStatusFetched, status]);\r\n\r\n\r\n  const handleClear = () => {\r\n    // Reset the frontend state to its initial values\r\n    setStatus('Idle');\r\n    setMessage('');\r\n    setElapsedTime(0);\r\n    setResults(null);\r\n    setShardingStatusFetched(false); // Reset the flag to allow fetching sharding status again\r\n\r\n    // Clear sessionStorage to reset data\r\n    sessionStorage.clear();\r\n\r\n    // Optionally call the backend to reset any server-side state\r\n    resetSharding()\r\n      .then(() => {\r\n        console.log('Sharding reset successfully');\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to reset sharding:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Sharding Status</h2>\r\n      <p><strong>Status:</strong> {status}</p>\r\n      <p><strong>Message:</strong> {message}</p>\r\n      {/* If sharding is in progress, show elapsed time */}\r\n      {status === 'In Progress' && (\r\n        <p><strong>Elapsed Time:</strong> {elapsedTime} seconds</p>\r\n      )}\r\n\r\n      <h2>Sharding Results</h2>\r\n      {/* If results are available, show them */}\r\n      {results ? (\r\n        <ResultView metadata={results} /> // Pass results as props to ResultView\r\n      ) : (\r\n        <p>Waiting for sharding to complete...</p>\r\n      )}\r\n\r\n      {/* Clear button to reset the process */}\r\n      <button onClick={handleClear}>Clear</button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MonitorView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}